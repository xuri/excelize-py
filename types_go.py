"""Copyright 2024 - 2025 The excelize Authors. All rights reserved. Use of this
source code is governed by a BSD-style license that can be found in the LICENSE
file.

Package excelize-py is a Python port of Go Excelize library, providing a set of
functions that allow you to write and read from XLAM / XLSM / XLSX / XLTM / XLTX
files. Supports reading and writing spreadsheet documents generated by Microsoft
Excelâ„¢ 2007 and later. Supports complex components by high compatibility, and
provided streaming API for generating or reading data from a worksheet with huge
amounts of data. This library needs Python version 3.9 or later.
"""

from ctypes import (
    c_bool,
    c_char_p,
    c_char,
    c_double,
    c_int,
    c_long,
    c_ubyte,
    c_uint,
    Structure,
    POINTER,
)


class _Interface(Structure):
    _fields_ = [
        ("Type", c_int),
        ("Integer", c_int),
        ("String", c_char_p),
        ("Float64", c_double),
        ("Boolean", c_bool),
    ]


class _Options(Structure):
    _fields_ = [
        ("MaxCalcIterations", c_uint),
        ("Password", c_char_p),
        ("RawCellValue", c_bool),
        ("UnzipSizeLimit", c_long),
        ("UnzipXMLSizeLimit", c_long),
        ("ShortDatePattern", c_char_p),
        ("LongDatePattern", c_char_p),
        ("LongTimePattern", c_char_p),
        ("CultureInfo", c_uint),
    ]


class _AppProperties(Structure):
    _fields_ = [
        ("Application", c_char_p),
        ("ScaleCrop", c_bool),
        ("DocSecurity", c_int),
        ("Company", c_char_p),
        ("LinksUpToDate", c_bool),
        ("HyperlinksChanged", c_bool),
        ("AppVersion", c_char_p),
    ]


class _Cell(Structure):
    _fields_ = [
        ("StyleID", c_int),
        ("Formula", c_char_p),
        ("Value", _Interface),
    ]


class _RowOpts(Structure):
    _fields_ = [
        ("Height", c_double),
        ("Hidden", c_bool),
        ("StyleID", c_int),
        ("OutlineLevel", c_int),
    ]


class _Border(Structure):
    _fields_ = [
        ("Type", c_char_p),
        ("Color", c_char_p),
        ("Style", c_int),
    ]


class _Fill(Structure):
    _fields_ = [
        ("Type", c_char_p),
        ("Pattern", c_int),
        ("ColorLen", c_int),
        ("Color", POINTER(POINTER(c_char))),
        ("Shading", c_int),
    ]


class _Font(Structure):
    _fields_ = [
        ("Bold", c_bool),
        ("Italic", c_bool),
        ("Underline", c_char_p),
        ("Family", c_char_p),
        ("Size", c_double),
        ("Strike", c_bool),
        ("Color", c_char_p),
        ("ColorIndexed", c_int),
        ("ColorTheme", POINTER(c_int)),
        ("ColorTint", c_double),
        ("VertAlign", c_char_p),
    ]


class _Alignment(Structure):
    _fields_ = [
        ("Horizontal", c_char_p),
        ("Indent", c_int),
        ("JustifyLastLine", c_bool),
        ("ReadingOrder", c_uint),
        ("RelativeIndent", c_int),
        ("ShrinkToFit", c_bool),
        ("TextRotation", c_int),
        ("Vertical", c_char_p),
        ("WrapText", c_bool),
    ]


class _Protection(Structure):
    _fields_ = [
        ("Hidden", c_bool),
        ("Locked", c_bool),
    ]


class _AutoFilterOptions(Structure):
    _fields_ = [
        ("Column", c_char_p),
        ("Expression", c_char_p),
    ]


class _FormulaOpts(Structure):
    _fields_ = [
        ("Type", POINTER(c_char_p)),
        ("Ref", POINTER(c_char_p)),
    ]


class _HeaderFooterOptions(Structure):
    _fields_ = [
        ("AlignWithMargins", POINTER(c_bool)),
        ("DifferentFirst", c_bool),
        ("DifferentOddEven", c_bool),
        ("ScaleWithDoc", POINTER(c_bool)),
        ("OddHeader", c_char_p),
        ("OddFooter", c_char_p),
        ("EvenHeader", c_char_p),
        ("EvenFooter", c_char_p),
        ("FirstHeader", c_char_p),
        ("FirstFooter", c_char_p),
    ]


class _HyperlinkOpts(Structure):
    _fields_ = [
        ("Display", POINTER(c_char_p)),
        ("Tooltip", POINTER(c_char_p)),
    ]


class _Style(Structure):
    _fields_ = [
        ("BorderLen", c_int),
        ("Border", POINTER(_Border)),
        ("Fill", _Fill),
        ("Font", POINTER(_Font)),
        ("Alignment", POINTER(_Alignment)),
        ("Protection", POINTER(_Protection)),
        ("NumFmt", c_int),
        ("DecimalPlaces", POINTER(c_int)),
        ("CustomNumFmt", POINTER(c_char_p)),
        ("NegRed", c_bool),
    ]


class _GraphicOptions(Structure):
    _fields_ = [
        ("AltText", c_char_p),
        ("PrintObject", POINTER(c_bool)),
        ("Locked", POINTER(c_bool)),
        ("LockAspectRatio", c_bool),
        ("AutoFit", c_bool),
        ("AutoFitIgnoreAspect", c_bool),
        ("OffsetX", c_int),
        ("OffsetY", c_int),
        ("ScaleX", c_double),
        ("ScaleY", c_double),
        ("Hyperlink", c_char_p),
        ("HyperlinkType", c_char_p),
        ("Positioning", c_char_p),
    ]


class _PageLayoutMarginsOptions(Structure):
    _fields_ = [
        ("Bottom", POINTER(c_double)),
        ("Footer", POINTER(c_double)),
        ("Header", POINTER(c_double)),
        ("Left", POINTER(c_double)),
        ("Right", POINTER(c_double)),
        ("Top", POINTER(c_double)),
        ("Horizontally", POINTER(c_bool)),
        ("Vertically", POINTER(c_bool)),
    ]


class _PageLayoutOptions(Structure):
    _fields_ = [
        ("Size", POINTER(c_int)),
        ("Orientation", POINTER(c_char_p)),
        ("FirstPageNumber", POINTER(c_uint)),
        ("AdjustTo", POINTER(c_uint)),
        ("FitToHeight", POINTER(c_int)),
        ("FitToWidth", POINTER(c_int)),
        ("BlackAndWhite", POINTER(c_bool)),
        ("PageOrder", POINTER(c_char_p)),
    ]


class _Picture(Structure):
    _fields_ = [
        ("Extension", c_char_p),
        ("FileLen", c_int),
        ("File", POINTER(c_ubyte)),
        ("Format", POINTER(_GraphicOptions)),
        ("InsertType", c_uint),
    ]


class _Selection(Structure):
    _fields_ = [
        ("SQRef", c_char_p),
        ("ActiveCell", c_char_p),
        ("Pane", c_char_p),
    ]


class _Panes(Structure):
    _fields_ = [
        ("Freeze", c_bool),
        ("Split", c_bool),
        ("XSplit", c_int),
        ("YSplit", c_int),
        ("TopLeftCell", c_char_p),
        ("ActivePane", c_char_p),
        ("SelectionLen", c_int),
        ("Selection", POINTER(_Selection)),
    ]


class _RichTextRun(Structure):
    _fields_ = [
        ("Font", POINTER(_Font)),
        ("Text", c_char_p),
    ]


class _Comment(Structure):
    _fields_ = [
        ("Author", c_char_p),
        ("AuthorID", c_int),
        ("Cell", c_char_p),
        ("Text", c_char_p),
        ("Width", c_uint),
        ("Height", c_uint),
        ("ParagraphLen", c_int),
        ("Paragraph", POINTER(_RichTextRun)),
    ]


class _ConditionalFormatOptions(Structure):
    _fields_ = [
        ("Type", c_char_p),
        ("AboveAverage", c_bool),
        ("Percent", c_bool),
        ("Format", POINTER(c_int)),
        ("Criteria", c_char_p),
        ("Value", c_char_p),
        ("MinType", c_char_p),
        ("MidType", c_char_p),
        ("MaxType", c_char_p),
        ("MinValue", c_char_p),
        ("MidValue", c_char_p),
        ("MaxValue", c_char_p),
        ("MinColor", c_char_p),
        ("MidColor", c_char_p),
        ("MaxColor", c_char_p),
        ("BarColor", c_char_p),
        ("BarBorderColor", c_char_p),
        ("BarDirection", c_char_p),
        ("BarOnly", c_bool),
        ("BarSolid", c_bool),
        ("IconStyle", c_char_p),
        ("ReverseIcons", c_bool),
        ("IconsOnly", c_bool),
        ("StopIfTrue", c_bool),
    ]


class _FormControl(Structure):
    _fields_ = [
        ("Cell", c_char_p),
        ("Macro", c_char_p),
        ("Width", c_uint),
        ("Height", c_uint),
        ("Checked", c_bool),
        ("CurrentVal", c_uint),
        ("MinVal", c_uint),
        ("MaxVal", c_uint),
        ("IncChange", c_uint),
        ("PageChange", c_uint),
        ("Horizontally", c_bool),
        ("CellLink", c_char_p),
        ("Text", c_char_p),
        ("ParagraphLen", c_int),
        ("Paragraph", POINTER(_RichTextRun)),
        ("Type", c_uint),
        ("Format", _GraphicOptions),
    ]


class _ChartNumFmt(Structure):
    _fields_ = [
        ("CustomNumFmt", c_char_p),
        ("SourceLinked", c_bool),
    ]


class _ChartAxis(Structure):
    _fields_ = [
        ("None", c_bool),
        ("MajorGridLines", c_bool),
        ("MinorGridLines", c_bool),
        ("MajorUnit", c_double),
        ("TickLabelPosition", c_uint),
        ("TickLabelSkip", c_int),
        ("ReverseOrder", c_bool),
        ("Secondary", c_bool),
        ("Maximum", POINTER(c_double)),
        ("Minimum", POINTER(c_double)),
        ("Alignment", _Alignment),
        ("Font", _Font),
        ("LogBase", c_double),
        ("NumFmt", _ChartNumFmt),
        ("TitleLen", c_int),
        ("Title", POINTER(_RichTextRun)),
    ]


class _ChartDataLabel(Structure):
    _fields_ = [
        ("Alignment", _Alignment),
        ("Font", _Font),
        ("Fill", _Fill),
    ]


class _ChartDimension(Structure):
    _fields_ = [
        ("Width", c_uint),
        ("Height", c_uint),
    ]


class _ChartPlotArea(Structure):
    _fields_ = [
        ("SecondPlotValues", c_int),
        ("ShowBubbleSize", c_bool),
        ("ShowCatName", c_bool),
        ("ShowLeaderLines", c_bool),
        ("ShowPercent", c_bool),
        ("ShowSerName", c_bool),
        ("ShowVal", c_bool),
        ("Fill", _Fill),
        ("NumFmt", _ChartNumFmt),
    ]


class _ChartLegend(Structure):
    _fields_ = [
        ("Position", c_char_p),
        ("ShowLegendKey", c_bool),
    ]


class _ChartMarker(Structure):
    _fields_ = [
        ("Fill", _Fill),
        ("Symbol", c_char_p),
        ("Size", c_int),
    ]


class _ChartLine(Structure):
    _fields_ = [
        ("Type", c_uint),
        ("Smooth", c_bool),
        ("Width", c_double),
    ]


class _ChartSeries(Structure):
    _fields_ = [
        ("Name", c_char_p),
        ("Categories", c_char_p),
        ("Values", c_char_p),
        ("Sizes", c_char_p),
        ("Fill", _Fill),
        ("Line", _ChartLine),
        ("Marker", _ChartMarker),
        ("DataLabel", _ChartDataLabel),
        ("DataLabelPosition", c_uint),
    ]


class _Chart(Structure):
    _fields_ = [
        ("Type", c_uint),
        ("SeriesLen", c_int),
        ("Series", POINTER(_ChartSeries)),
        ("Format", _GraphicOptions),
        ("Dimension", _ChartDimension),
        ("Legend", _ChartLegend),
        ("TitleLen", c_int),
        ("Title", POINTER(_RichTextRun)),
        ("VaryColors", POINTER(c_bool)),
        ("XAxis", _ChartAxis),
        ("YAxis", _ChartAxis),
        ("PlotArea", _ChartPlotArea),
        ("Fill", _Fill),
        ("Border", _ChartLine),
        ("ShowBlanksAs", c_char_p),
        ("BubbleSize", c_int),
        ("HoleSize", c_int),
        ("GapWidth", POINTER(c_uint)),
        ("Overlap", POINTER(c_int)),
    ]


class _PivotTableField(Structure):
    _fields_ = [
        ("Compact", c_bool),
        ("Data", c_char_p),
        ("Name", c_char_p),
        ("Outline", c_bool),
        ("ShowAll", c_bool),
        ("InsertBlankRow", c_bool),
        ("Subtotal", c_char_p),
        ("DefaultSubtotal", c_bool),
        ("NumFmt", c_int),
    ]


class _PivotTableOptions(Structure):
    _fields_ = [
        ("DataRange", c_char_p),
        ("PivotTableRange", c_char_p),
        ("Name", c_char_p),
        ("RowsLen", c_int),
        ("Rows", POINTER(_PivotTableField)),
        ("ColumnsLen", c_int),
        ("Columns", POINTER(_PivotTableField)),
        ("DataLen", c_int),
        ("Data", POINTER(_PivotTableField)),
        ("FilterLen", c_int),
        ("Filter", POINTER(_PivotTableField)),
        ("RowGrandTotals", c_bool),
        ("ColGrandTotals", c_bool),
        ("ShowDrill", c_bool),
        ("UseAutoFormatting", c_bool),
        ("PageOverThenDown", c_bool),
        ("MergeItem", c_bool),
        ("ClassicLayout", c_bool),
        ("CompactData", c_bool),
        ("ShowError", c_bool),
        ("ShowRowHeaders", c_bool),
        ("ShowColHeaders", c_bool),
        ("ShowRowStripes", c_bool),
        ("ShowColStripes", c_bool),
        ("ShowLastColumn", c_bool),
        ("FieldPrintTitles", c_bool),
        ("ItemPrintTitles", c_bool),
        ("PivotTableStyleName", c_char_p),
    ]


class _ShapeLine(Structure):
    _fields_ = [
        ("Color", c_char_p),
        ("Width", POINTER(c_double)),
    ]


class _Shape(Structure):
    _fields_ = [
        ("Cell", c_char_p),
        ("Type", c_char_p),
        ("Macro", c_char_p),
        ("Width", c_uint),
        ("Height", c_uint),
        ("Format", _GraphicOptions),
        ("Fill", _Fill),
        ("Line", _ShapeLine),
        ("ParagraphLen", c_int),
        ("Paragraph", POINTER(_RichTextRun)),
    ]


class _SheetPropsOptions(Structure):
    _fields_ = [
        ("CodeName", POINTER(c_char_p)),
        ("EnableFormatConditionsCalculation", POINTER(c_bool)),
        ("Published", POINTER(c_bool)),
        ("AutoPageBreaks", POINTER(c_bool)),
        ("FitToPage", POINTER(c_bool)),
        ("TabColorIndexed", POINTER(c_int)),
        ("TabColorRGB", POINTER(c_char_p)),
        ("TabColorTheme", POINTER(c_int)),
        ("TabColorTint", POINTER(c_double)),
        ("OutlineSummaryBelow", POINTER(c_bool)),
        ("OutlineSummaryRight", POINTER(c_bool)),
        ("BaseColWidth", POINTER(c_uint)),
        ("DefaultColWidth", POINTER(c_double)),
        ("DefaultRowHeight", POINTER(c_double)),
        ("CustomHeight", POINTER(c_bool)),
        ("ZeroHeight", POINTER(c_bool)),
        ("ThickTop", POINTER(c_bool)),
        ("ThickBottom", POINTER(c_bool)),
    ]


class _SheetProtectionOptions(Structure):
    _fields_ = [
        ("AlgorithmName", c_char_p),
        ("AutoFilter", c_bool),
        ("DeleteColumns", c_bool),
        ("DeleteRows", c_bool),
        ("EditObjects", c_bool),
        ("EditScenarios", c_bool),
        ("FormatCells", c_bool),
        ("FormatColumns", c_bool),
        ("FormatRows", c_bool),
        ("InsertColumns", c_bool),
        ("InsertHyperlinks", c_bool),
        ("InsertRows", c_bool),
        ("Password", c_char_p),
        ("PivotTables", c_bool),
        ("SelectLockedCells", c_bool),
        ("SelectUnlockedCells", c_bool),
        ("Sort", c_bool),
    ]


class _SlicerOptions(Structure):
    _fields_ = [
        ("Name", c_char_p),
        ("Cell", c_char_p),
        ("TableSheet", c_char_p),
        ("TableName", c_char_p),
        ("Caption", c_char_p),
        ("Macro", c_char_p),
        ("Width", c_uint),
        ("Height", c_uint),
        ("DisplayHeader", POINTER(c_bool)),
        ("ItemDesc", c_bool),
        ("Format", _GraphicOptions),
    ]


class _SparklineOptions(Structure):
    _fields_ = [
        ("LocationLen", c_int),
        ("Location", POINTER(POINTER(c_char))),
        ("RangeLen", c_int),
        ("Range", POINTER(POINTER(c_char))),
        ("Max", c_int),
        ("CustMax", c_int),
        ("Min", c_int),
        ("CustMin", c_int),
        ("Type", c_char_p),
        ("Weight", c_double),
        ("DateAxis", c_bool),
        ("Markers", c_bool),
        ("High", c_bool),
        ("Low", c_bool),
        ("First", c_bool),
        ("Last", c_bool),
        ("Negative", c_bool),
        ("Axis", c_bool),
        ("Hidden", c_bool),
        ("Reverse", c_bool),
        ("Style", c_int),
        ("SeriesColor", c_char_p),
        ("NegativeColor", c_char_p),
        ("MarkersColor", c_char_p),
        ("FirstColor", c_char_p),
        ("LastColor", c_char_p),
        ("HightColor", c_char_p),
        ("LowColor", c_char_p),
        ("EmptyCells", c_char_p),
    ]


class _Table(Structure):
    _fields_ = [
        ("Range", c_char_p),
        ("Name", c_char_p),
        ("StyleName", c_char_p),
        ("ShowColumnStripes", c_bool),
        ("ShowFirstColumn", c_bool),
        ("ShowHeaderRow", POINTER(c_bool)),
        ("ShowLastColumn", c_bool),
        ("ShowRowStripes", POINTER(c_bool)),
    ]


class _ViewOptions(Structure):
    _fields_ = [
        ("DefaultGridColor", POINTER(c_bool)),
        ("RightToLeft", POINTER(c_bool)),
        ("ShowFormulas", POINTER(c_bool)),
        ("ShowGridLines", POINTER(c_bool)),
        ("ShowRowColHeaders", POINTER(c_bool)),
        ("ShowRuler", POINTER(c_bool)),
        ("ShowZeros", POINTER(c_bool)),
        ("TopLeftCell", POINTER(c_char_p)),
        ("View", POINTER(c_char_p)),
        ("ZoomScale", POINTER(c_double)),
    ]


class _DefinedName(Structure):
    _fields_ = [
        ("Name", c_char_p),
        ("Comment", c_char_p),
        ("RefersTo", c_char_p),
        ("Scope", c_char_p),
    ]


class _WorkbookPropsOptions(Structure):
    _fields_ = [
        ("Date1904", POINTER(c_bool)),
        ("FilterPrivacy", POINTER(c_bool)),
        ("CodeName", POINTER(c_char_p)),
    ]


class _WorkbookProtectionOptions(Structure):
    _fields_ = [
        ("AlgorithmName", c_char_p),
        ("Password", c_char_p),
        ("LockStructure", c_bool),
        ("LockWindows", c_bool),
    ]


class _StringErrorResult(Structure):
    _fields_ = [
        ("val", c_char_p),
        ("err", c_char_p),
    ]


class _IntErrorResult(Structure):
    _fields_ = [
        ("val", c_int),
        ("err", c_char_p),
    ]


class _BoolErrorResult(Structure):
    _fields_ = [
        ("val", c_bool),
        ("err", c_char_p),
    ]

class _StringArrayErrorResult(Structure):
    _fields_ = [
        ("ArrLen", c_int),
        ("Arr", POINTER(POINTER(c_char))),
        ("Err", c_char_p),
    ]

class _CellNameToCoordinatesResult(Structure):
    _fields_ = [
        ("col", c_int),
        ("row", c_int),
        ("err", c_char_p),
    ]


class _GetAppPropsResult(Structure):
    _fields_ = [
        ("opts", _AppProperties),
        ("err", c_char_p),
    ]


class _GetCellHyperLinkResult(Structure):
    _fields_ = [
        ("link", c_bool),
        ("target", c_char_p),
        ("err", c_char_p),
    ]


class _Row(Structure):
    _fields_ = [
        ("CellLen", c_int),
        ("Cell", POINTER(POINTER(c_char))),
    ]


class _GetRowsResult(Structure):
    _fields_ = [
        ("RowLen", c_int),
        ("Row", POINTER(_Row)),
        ("err", c_char_p),
    ]


class _GetStyleResult(Structure):
    _fields_ = [
        ("style", _Style),
        ("err", c_char_p),
    ]


class _GetTablesResult(Structure):
    _fields_ = [
        ("TablesLen", c_int),
        ("Tables", POINTER(_Table)),
        ("Err", c_char_p),
    ]
