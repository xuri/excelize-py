"""Copyright 2024 The excelize Authors. All rights reserved. Use of this source
code is governed by a BSD-style license that can be found in the LICENSE file.

Package excelize-py is a Python port of Go Excelize library, providing a set of
functions that allow you to write and read from XLAM / XLSM / XLSX / XLTM / XLTX
files. Supports reading and writing spreadsheet documents generated by Microsoft
Excelâ„¢ 2007 and later. Supports complex components by high compatibility, and
provided streaming API for generating or reading data from a worksheet with huge
amounts of data. This library needs Python version 3.9 or later.
"""

from ctypes import (
    c_bool,
    c_char_p,
    c_char,
    c_double,
    c_int,
    c_long,
    c_uint,
    Structure,
    POINTER,
)


class _Interface(Structure):
    _fields_ = [
        ("Type", c_int),
        ("Integer", c_int),
        ("String", c_char_p),
        ("Float64", c_double),
        ("Boolean", c_bool),
    ]


class _Options(Structure):
    _fields_ = [
        ("MaxCalcIterations", c_uint),
        ("Password", c_char_p),
        ("RawCellValue", c_bool),
        ("UnzipSizeLimit", c_long),
        ("UnzipXMLSizeLimit", c_long),
        ("ShortDatePattern", c_char_p),
        ("LongDatePattern", c_char_p),
        ("LongTimePattern", c_char_p),
        ("CultureInfo", c_uint),
    ]


class _Border(Structure):
    _fields_ = [
        ("Type", c_char_p),
        ("Color", c_char_p),
        ("Style", c_int),
    ]


class _Fill(Structure):
    _fields_ = [
        ("Type", c_char_p),
        ("Pattern", c_int),
        ("ColorLen", c_int),
        ("Color", POINTER(POINTER(c_char))),
        ("Shading", c_int),
    ]


class _Font(Structure):
    _fields_ = [
        ("Bold", c_bool),
        ("Italic", c_bool),
        ("Underline", c_char_p),
        ("Family", c_char_p),
        ("Size", c_double),
        ("Strike", c_bool),
        ("Color", c_char_p),
        ("ColorIndexed", c_int),
        ("ColorTheme", POINTER(c_int)),
        ("ColorTint", c_double),
        ("VertAlign", c_char_p),
    ]


class _Alignment(Structure):
    _fields_ = [
        ("Horizontal", c_char_p),
        ("Indent", c_int),
        ("JustifyLastLine", c_bool),
        ("ReadingOrder", c_uint),
        ("RelativeIndent", c_int),
        ("ShrinkToFit", c_bool),
        ("TextRotation", c_int),
        ("Vertical", c_char_p),
        ("WrapText", c_bool),
    ]


class _Protection(Structure):
    _fields_ = [
        ("Hidden", c_bool),
        ("Locked", c_bool),
    ]


class _Style(Structure):
    _fields_ = [
        ("BorderLen", c_int),
        ("Border", POINTER(_Border)),
        ("Fill", _Fill),
        ("Font", POINTER(_Font)),
        ("Alignment", POINTER(_Alignment)),
        ("Protection", POINTER(_Protection)),
        ("NumFmt", c_int),
        ("DecimalPlaces", POINTER(c_int)),
        ("CustomNumFmt", POINTER(c_char_p)),
        ("NegRed", c_bool),
    ]


class _GraphicOptions(Structure):
    _fields_ = [
        ("AltText", c_char_p),
        ("PrintObject", POINTER(c_bool)),
        ("Locked", POINTER(c_bool)),
        ("LockAspectRatio", c_bool),
        ("AutoFit", c_bool),
        ("AutoFitIgnoreAspect", c_bool),
        ("OffsetX", c_int),
        ("OffsetY", c_int),
        ("ScaleX", c_double),
        ("ScaleY", c_double),
        ("Hyperlink", c_char_p),
        ("HyperlinkType", c_char_p),
        ("Positioning", c_char_p),
    ]


class _RichTextRun(Structure):
    _fields_ = [
        ("Font", POINTER(_Font)),
        ("Text", c_char_p),
    ]


class _ChartNumFmt(Structure):
    _fields_ = [
        ("CustomNumFmt", c_char_p),
        ("SourceLinked", c_bool),
    ]


class _ChartAxis(Structure):
    _fields_ = [
        ("None", c_bool),
        ("MajorGridLines", c_bool),
        ("MinorGridLines", c_bool),
        ("MajorUnit", c_double),
        ("TickLabelPosition", c_uint),
        ("TickLabelSkip", c_int),
        ("ReverseOrder", c_bool),
        ("Secondary", c_bool),
        ("Maximum", POINTER(c_double)),
        ("Minimum", POINTER(c_double)),
        ("Alignment", _Alignment),
        ("Font", _Font),
        ("LogBase", c_double),
        ("NumFmt", _ChartNumFmt),
        ("TitleLen", c_int),
        ("Title", POINTER(_RichTextRun)),
    ]


class _ChartDimension(Structure):
    _fields_ = [
        ("Width", c_uint),
        ("Height", c_uint),
    ]


class _ChartPlotArea(Structure):
    _fields_ = [
        ("SecondPlotValues", c_int),
        ("ShowBubbleSize", c_bool),
        ("ShowCatName", c_bool),
        ("ShowLeaderLines", c_bool),
        ("ShowPercent", c_bool),
        ("ShowSerName", c_bool),
        ("ShowVal", c_bool),
        ("Fill", _Fill),
        ("NumFmt", _ChartNumFmt),
    ]


class _ChartLegend(Structure):
    _fields_ = [
        ("Position", c_char_p),
        ("ShowLegendKey", c_bool),
    ]


class _ChartMarker(Structure):
    _fields_ = [
        ("Fill", _Fill),
        ("Symbol", c_char_p),
        ("Size", c_int),
    ]


class _ChartLine(Structure):
    _fields_ = [
        ("Type", c_uint),
        ("Smooth", c_bool),
        ("Width", c_double),
    ]


class _ChartSeries(Structure):
    _fields_ = [
        ("Name", c_char_p),
        ("Categories", c_char_p),
        ("Values", c_char_p),
        ("Sizes", c_char_p),
        ("Fill", _Fill),
        ("Line", _ChartLine),
        ("Marker", _ChartMarker),
        ("DataLabelPosition", c_uint),
    ]


class _Chart(Structure):
    _fields_ = [
        ("Type", c_uint),
        ("SeriesLen", c_int),
        ("Series", POINTER(_ChartSeries)),
        ("Format", _GraphicOptions),
        ("Dimension", _ChartDimension),
        ("Legend", _ChartLegend),
        ("TitleLen", c_int),
        ("Title", POINTER(_RichTextRun)),
        ("VaryColors", POINTER(c_bool)),
        ("XAxis", _ChartAxis),
        ("YAxis", _ChartAxis),
        ("PlotArea", _ChartPlotArea),
        ("Fill", _Fill),
        ("Border", _ChartLine),
        ("ShowBlanksAs", c_char_p),
        ("BubbleSize", c_int),
        ("HoleSize", c_int),
    ]


class _CoordinatesToCellNameResult(Structure):
    _fields_ = [
        ("cell", c_char_p),
        ("err", c_char_p),
    ]


class _GetCellValueResult(Structure):
    _fields_ = [
        ("val", c_char_p),
        ("err", c_char_p),
    ]


class _Row(Structure):
    _fields_ = [
        ("CellLen", c_int),
        ("Cell", POINTER(POINTER(c_char))),
    ]


class _GetRowsResult(Structure):
    _fields_ = [
        ("RowLen", c_int),
        ("Row", POINTER(_Row)),
        ("err", c_char_p),
    ]


class _NewSheetResult(Structure):
    _fields_ = [
        ("idx", c_int),
        ("err", c_char_p),
    ]


class _NewStyleResult(Structure):
    _fields_ = [
        ("style", c_int),
        ("err", c_char_p),
    ]


class _GetStyleResult(Structure):
    _fields_ = [
        ("style", _Style),
        ("err", c_char_p),
    ]


class _OptionsResult(Structure):
    _fields_ = [
        ("idx", c_int),
        ("err", c_char_p),
    ]
